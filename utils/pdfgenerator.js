import { PDFDocument, StandardFonts, rgb } from "pdf-lib";
const generatePDF = async (setdocloading,plan) => {
    setdocloading(true);
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([595.28, 841.89]);
    const { width, height } = page.getSize();
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    
      
      const colors = {
        header: rgb(0, 0, 0),
        border: rgb(0, 0, 0),
        text: rgb(0, 0, 0),
        footer: rgb(0.5, 0.5, 0.5),
        alternateRow: rgb(0.9, 0.9, 0.9),
      };
      
      

    page.drawText("Schedule", {
      x: 220,
      y: height - 100,
      size: 30,
      font: font,
      color: colors.header,
    });

    page.drawRectangle({
      x: 10,
      y: 10,
      width: width - 20,
      height: height - 20,
      borderColor: colors.border,
      borderWidth: 3,
    });

    let currentY = height - 150;

    const columnX = [40, 80, 440, 500];
    const rowHeight = 30;

    page.drawText("No.", {
      x: columnX[0],
      y: currentY,
      size: 16,
      font: font,
      color: colors.text,
    });
    page.drawText("Task", {
      x: columnX[1],
      y: currentY,
      size: 16,
      font: font,
      color: colors.text,
    });
    page.drawText("Start", {
      x: columnX[2],
      y: currentY,
      size: 16,
      font: font,
      color: colors.text,
    });
    page.drawText("End", {
      x: columnX[3],
      y: currentY,
      size: 16,
      font: font,
      color: colors.text,
    });

    page.drawRectangle({
      x: 35,
      y: currentY - 5,
      width: width - 80,
      height: 1,
      color: colors.border,
    });

    currentY -= rowHeight;

    for (let i = 0; i < plan.length; i++) {
      if (plan[i].trim() !== "") {
        const [task, start, end] = plan[i]
          .split(",")
          .map((item) => item.trim());

        if (i % 2 === 0) {
          page.drawRectangle({
            x: 35,
            y: currentY - rowHeight - 9,
            width: width - 80,
            height: rowHeight - 5,
            color: colors.alternateRow,
          });
        }

        page.drawText(`${i + 1}`, {
          x: columnX[0],
          y: currentY,
          size: 14,
          font: font,
          color: colors.text,
        });

        page.drawText(task, {
          x: columnX[1],
          y: currentY,
          size: 14,
          font: font,
          color: colors.text,
        });

        page.drawText(start, {
          x: columnX[2],
          y: currentY,
          size: 14,
          font: font,
          color: colors.text,
        });

        page.drawText(end, {
          x: columnX[3],
          y: currentY,
          size: 14,
          font: font,
          color: colors.text,
        });

        currentY -= rowHeight;
      }
    }

    const footerText = "Generated by ProductivePro";
    const footerWidth = font.widthOfTextAtSize(footerText, 12);

    page.drawText(footerText, {
      x: width - footerWidth - 50,
      y: 30,
      size: 12,
      font: font,
      color: colors.footer,
    });

    const pdfBytes = await pdfDoc.save();

    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "Schedule.pdf";
    link.click();
    setdocloading(false);
  };


  export default generatePDF;